@page "/books"

@using LibraryManagement.BlazorServer.Models
@using LibraryManagement.BlazorServer.Services
@inject IBookService BookService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Books</PageTitle>

<h3>All Books</h3>

<table class="table table-striped table-hover">
    <thead class="table-light">
        <tr>
            <th>Title</th>
            <th>Author</th>
            <th>Published</th>
            <th>Genre</th>
            <th class="text-end">Price</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (books == null)
        {
            <tr><td colspan="6">Loading…</td></tr>
        }
        else if (!books.Any())
        {
            <tr><td colspan="6">No books found.</td></tr>
        }
        else
        {
            @foreach (var book in books)
            {
                <tr>
                    <td>@book.Title</td>
                    <td>@book.Author</td>
                    <td>@book.PublishedDate:yyyy‑MM‑dd</td>
                    <td>@book.Genre</td>
                    <td class="text-end">@book.Price.ToString("C")</td>
                    <td class="text-nowrap">
                        <button class="btn btn-sm btn-outline-primary me-1"
                                @onclick="() => OnEditAsync(book.BookId)">
                            Edit
                        </button>
                        <button class="btn btn-sm btn-outline-danger"
                                @onclick="() => OnDeleteAsync(book.BookId)">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    private List<Book>? books;

    // 1) Use OnInitializedAsync so Blazor awaits it
    protected override async Task OnInitializedAsync()
    {
        await LoadBooksAsync();
    }

    // 2) LoadBooks returns a Task
    private async Task LoadBooksAsync()
    {
        books = await BookService.GetBooksAsync();
    }

    // 3) Edit returns Task (even if synchronous)
    private Task OnEditAsync(int bookId)
    {
        NavigationManager.NavigateTo($"/books/edit/{bookId}");
        return Task.CompletedTask;
    }

    // 4) Delete returns Task, awaits confirm + delete + reload
    private async Task OnDeleteAsync(int bookId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>(
            "confirm", $"Delete book #{bookId}?");
        if (!confirmed)
            return;

        await BookService.DeleteBookAsync(bookId);
        await LoadBooksAsync();
    }
}